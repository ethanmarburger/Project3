[
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "Final Project: Exploratory Data Analysis",
    "section": "",
    "text": "The data for this project is from Diabetes Health Indicators Dataset. This dataset was put together from the Center of Disease Control’s (CDC) Behavior Risk Factor Surveillance System (BRFSS) in 2015. The BRFSS is a premier telephone health-related telephone survey designed to collect state data about United States residents regarding their health-related risk behaviors, chronic health conditions, and use of preventive services. We are particularly interested in the indicators for Diabetes.\n\n\n\nDiabetes_binary: If subject has diabetes or not. While the dataset source mentions a prediabetes level, there are no corresponding values in the dataset.\n0 = no diabetes\n1 = diabetes\nHighBP: If subject has high blood pressure or not.\n0 = no high blood pressure\n1 = high blood pressure\nHighChol: If subject has high cholesterol or not.\n0 = no high cholesterol\n1 = high cholesterol\nCholCheck: If subject has had their cholesterol checked in the past 5 years.\n0 = no cholesterol check in 5 years\n1 = yes cholesterol check in 5 years\nBMI: Body Mass Index.\nPhysActivity: Physical activity in past 30 days - not including job.\n0 = no\n1 = yes\nSex: Is the subject male or female.\n0 = female\n1 = male\nAge: Thirteen level category indicating the age of the subject.\n1 = 18-24\n2 = 25-29\n3 = 30-34\n4 = 35-39\n5 = 40-44\n6 = 45-49\n7 = 50-54\n8 = 55-59\n9 = 60-64\n10 = 65-69\n11 = 70-74\n12 = 75-79\n13 = 80 or older\n\n\n\nThe purpose of Exploratory Data Analysis (EDA) is to understand the underlying structure, patterns, and relationships in a dataset before applying statistical models or making predictions. EDA serves as a critical first step in data analysis to ensure data quality and to guide further analysis or modeling efforts.\n\n\n\nThe ultimate goal of modeling in data science and statistics is to create a representation of the data’s underlying processes that can be used to 1) Explain Relationships, 2) Make Predictions, 3) Optimize Systems, 4) Classify or Group Data, 5) Identify Key Variable, 6) Reduce Complexity, 7) Generate Insights, and 8) Facilitate Generalization.\n\n\n\n\n\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n# Selecting chosen variables\ndata &lt;- data |&gt;\n  select(Diabetes_binary, HighBP, HighChol, CholCheck, BMI, PhysActivity, Sex, Age)\n\n\n\n\n\n\n\n# Seeing how the variables are stored\nstr(data)\n\ntibble [253,680 × 8] (S3: tbl_df/tbl/data.frame)\n $ Diabetes_binary: num [1:253680] 0 0 0 0 0 0 0 0 1 0 ...\n $ HighBP         : num [1:253680] 1 0 1 1 1 1 1 1 1 0 ...\n $ HighChol       : num [1:253680] 1 0 1 0 1 1 0 1 1 0 ...\n $ CholCheck      : num [1:253680] 1 0 1 1 1 1 1 1 1 1 ...\n $ BMI            : num [1:253680] 40 25 28 27 24 25 30 25 30 24 ...\n $ PhysActivity   : num [1:253680] 0 1 0 1 1 1 0 1 0 0 ...\n $ Sex            : num [1:253680] 0 0 0 0 0 1 0 0 0 1 ...\n $ Age            : num [1:253680] 9 7 9 11 11 10 9 11 9 8 ...\n\n\n\n\n\n\n# Column names\nnames(data)\n\n[1] \"Diabetes_binary\" \"HighBP\"          \"HighChol\"        \"CholCheck\"      \n[5] \"BMI\"             \"PhysActivity\"    \"Sex\"             \"Age\"            \n\n\n\n# Looking at unique values in the Diabetes_binary variable\nunique(data$Diabetes_binary)\n\n[1] 0 1\n\n\n\n# Quick numeric summary of data\nsummary(data)\n\n Diabetes_binary      HighBP         HighChol        CholCheck     \n Min.   :0.0000   Min.   :0.000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:1.0000  \n Median :0.0000   Median :0.000   Median :0.0000   Median :1.0000  \n Mean   :0.1393   Mean   :0.429   Mean   :0.4241   Mean   :0.9627  \n 3rd Qu.:0.0000   3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.000   Max.   :1.0000   Max.   :1.0000  \n      BMI         PhysActivity         Sex              Age        \n Min.   :12.00   Min.   :0.0000   Min.   :0.0000   Min.   : 1.000  \n 1st Qu.:24.00   1st Qu.:1.0000   1st Qu.:0.0000   1st Qu.: 6.000  \n Median :27.00   Median :1.0000   Median :0.0000   Median : 8.000  \n Mean   :28.38   Mean   :0.7565   Mean   :0.4403   Mean   : 8.032  \n 3rd Qu.:31.00   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:10.000  \n Max.   :98.00   Max.   :1.0000   Max.   :1.0000   Max.   :13.000  \n\n\nEvery variable except BMI and Age are binary, as indicated CDC’s dataset description as well as by the min and max values.\n\n\n\n\n# Using tidy syntax to look for missing values\ndata |&gt;\n  is.na() |&gt;\n  colSums()\n\nDiabetes_binary          HighBP        HighChol       CholCheck             BMI \n              0               0               0               0               0 \n   PhysActivity             Sex             Age \n              0               0               0 \n\n\nThere are no missing values in this dataset.\n\n\n\n\ndata &lt;- data |&gt;\n  mutate(\n    # Converting most variables to factors\n    diabetes = as.factor(Diabetes_binary),\n    high_bp = as.factor(HighBP),\n    high_chol = as.factor(HighChol),\n    chol_check = as.factor(CholCheck),\n    physical_act = as.factor(PhysActivity),\n    sex = as.factor(Sex),\n    age = as.factor(Age),\n    \n    # Recoding factor levels to change the names of the values \n    diabetes = fct_recode(diabetes,\n                          `No Diabetes` = \"0\",\n                          Diabetes = \"1\"),\n    high_bp = fct_recode(high_bp,\n                         No = \"0\",\n                         Yes = \"1\"),\n    high_chol = fct_recode(high_chol,\n                           No = \"0\",\n                           Yes = \"1\"),\n    chol_check = fct_recode(chol_check,\n                            No = \"0\",\n                            Yes = \"1\"),\n    physical_act = fct_recode(physical_act,\n                              No = \"0\",\n                              Yes = \"1\"),\n    sex = fct_recode(sex,\n                     Female = \"0\",\n                     Male = \"1\"),\n    age = fct_recode(age,\n                     `18-24` = \"1\",\n                     `25-29` = \"2\",\n                     `30-34` = \"3\",\n                     `35-39` = \"4\",\n                     `40-44` = \"5\",\n                     `45-49` = \"6\",\n                     `50-54` = \"7\",\n                     `55-59` = \"8\",\n                     `60-64` = \"9\",\n                     `65-69` = \"10\",\n                     `70-74` = \"11\",\n                     `75-79` = \"12\",\n                     `80_or_older` = \"13\")) |&gt;\n  # Removing most original variables\n  select(-Diabetes_binary, -HighBP, -HighChol, -CholCheck, -PhysActivity, -Sex, -Age)\n\n\n\n\n\n# Investigating the Response Variable\ntable(\"diabetes\" = data$diabetes)\n\ndiabetes\nNo Diabetes    Diabetes \n     218334       35346 \n\n\nMany more subjects without diabetes then with diabetes.\n\n# Investigating the Response Variable and Blood Pressure\ntable(\"diabetes\" = data$diabetes,\n      \"High Blood Pressure\" = data$high_bp)\n\n             High Blood Pressure\ndiabetes          No    Yes\n  No Diabetes 136109  82225\n  Diabetes      8742  26604\n\n\nRoughly 62% of subjects without diabetes reported no high blood pressure and roughly 25% of subjects with diabetes reported no high blood pressure.*\n\n# Investigating the Response Variable and Cholesterol\ntable(\"diabetes\" = data$diabetes,\n      \"High Cholesterol\" = data$high_chol)\n\n             High Cholesterol\ndiabetes          No    Yes\n  No Diabetes 134429  83905\n  Diabetes     11660  23686\n\n\nThere is roughly four times more people with high cholesterol without diabetes then with diabetes.\n\n# Investigating the Response Variable and Sex\ntable(\"diabetes\" = data$diabetes,\n      \"Sex\" = data$sex)\n\n             Sex\ndiabetes      Female   Male\n  No Diabetes 123563  94771\n  Diabetes     18411  16935\n\n\nThe difference between males and females with diabetes in this study is roughly 1,500 people. In a dataset consisting of 253,680 people, this is extremely close.\n\n# Investigating the Response Variable by Sex and Blood Pressure\ntable(\"diabetes\" = data$diabetes,\n      \"High Blood Pressure?\" = data$high_bp,\n      \"Sex\" = data$sex)\n\n, , Sex = Female\n\n             High Blood Pressure?\ndiabetes         No   Yes\n  No Diabetes 79815 43748\n  Diabetes     4506 13905\n\n, , Sex = Male\n\n             High Blood Pressure?\ndiabetes         No   Yes\n  No Diabetes 56294 38477\n  Diabetes     4236 12699\n\n\nSimilar to the last the contingency table, the number of males and females with and without diabetes and high blood pressure is very close.\n\n# Investigating the Response Variable and Age\ntable(\"diabetes\" = data$diabetes,\n      \"Age Range\" = data$age)\n\n             Age Range\ndiabetes      18-24 25-29 30-34 35-39 40-44 45-49 50-54 55-59 60-64 65-69 70-74\n  No Diabetes  5622  7458 10809 13197 15106 18077 23226 26569 27511 25636 18392\n  Diabetes       78   140   314   626  1051  1742  3088  4263  5733  6558  5141\n             Age Range\ndiabetes      75-79 80_or_older\n  No Diabetes 12577       14154\n  Diabetes     3403        3209\n\n\nSubjects in the age range of 65-69 made up the largest group of individuals with diabetes.\n\n# Measure of center and spread for BMI grouped by diabetes\ndata |&gt;\n  group_by(diabetes) |&gt;\n  summarize(across(\"BMI\", \n                   .fns = c(\"mean\" = mean,\n                            \"median\" = median,\n                            \"sd\" = sd,\n                            \"IQR\" = IQR,\n                            \"min\" = min,\n                            \"max\" = max),\n                   .names = \"{.col}_{.fn}\"))\n\n# A tibble: 2 × 7\n  diabetes    BMI_mean BMI_median BMI_sd BMI_IQR BMI_min BMI_max\n  &lt;fct&gt;          &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 No Diabetes     27.8         27   6.29       7      12      98\n2 Diabetes        31.9         31   7.36       8      13      98\n\n\nThe mean and median BMI values for individuals with and without diabetes are virtually the same.\n\n\n\n\n# Bar plot\nggplot(data, aes(x = diabetes)) +\n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Individuals with Diabetes\",\n       x = \"Diabetes?\",\n       y = \"Count\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nIt’s interesting to visualize just how many less people there are with diabetes then without in this dataset.\n\n# Stacked bar plot\nggplot(data, aes(x = diabetes, fill = sex)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Proportion of Diabetes by Sex\",\n       x = \"Diabetes?\",\n       y = \"Proportion\") +\n  scale_fill_manual(values = c(\"skyblue\", \"salmon\")) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nAgain, the difference between males and females with diabetes in this study is roughly 1,500 people. It’s interesting that more males have diabetes then females.\n\n# Stacked bar plot\nggplot(data, aes(x = diabetes, fill = physical_act)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Proportion of Diabetes by Physical Activity in the Last 30 Days\",\n       x = \"Diabetes?\",\n       y = \"Proportion\") +\n  scale_fill_manual(values = c(\"skyblue\", \"salmon\")) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nIt’s interesting, and unsurprising, that individuals with diabetes engage in less physical activity.\n\nggplot(data, aes(x = diabetes, y = BMI)) +\n  geom_jitter(aes(color = sex)) +\n  labs(title = \"Diabetes and Body Mass Index by Sex\",\n       x = \"Diabetes?\",\n       y = \"BMI\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nThe scatter plot clearly shows that individuals with diabetes tend to have a lower BMI.\n\n# Proportional bar plot for Diabetes by Physical Activity and Age\nggplot(data, aes(x = diabetes, fill = physical_act)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Proportion of Diabetes by Physical Activity and Age\",\n       x = \"Diabetes?\",\n       y = \"Proportion\") +\n  scale_fill_manual(values = c(\"skyblue\", \"salmon\")) +\n  facet_wrap(~age) +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 60, hjust = 1))  # Rotate x-axis text\n\n\n\n\n\n\n\n\nIt’s interesting that at the lowest age range (18-24) the proportion of individuals with and without diabetes is the closest.\n\n# Proportional bar plot for Diabetes by Sex and Blood pressure\nggplot(data, aes(x = diabetes, fill = high_bp)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Proportion of Diabetes by Physical Activity and Age\",\n       x = \"Diabetes?\",\n       y = \"Proportion\") +\n  scale_fill_manual(values = c(\"skyblue\", \"salmon\")) +\n  facet_wrap(~sex) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nIt’s interesting that the proportions of males and females with and without diabetes are similar."
  },
  {
    "objectID": "EDA.html#exploratory-data-analysis-eda",
    "href": "EDA.html#exploratory-data-analysis-eda",
    "title": "Final Project: Exploratory Data Analysis",
    "section": "",
    "text": "The data for this project is from Diabetes Health Indicators Dataset. This dataset was put together from the Center of Disease Control’s (CDC) Behavior Risk Factor Surveillance System (BRFSS) in 2015. The BRFSS is a premier telephone health-related telephone survey designed to collect state data about United States residents regarding their health-related risk behaviors, chronic health conditions, and use of preventive services. We are particularly interested in the indicators for Diabetes.\n\n\n\nDiabetes_binary: If subject has diabetes or not. While the dataset source mentions a prediabetes level, there are no corresponding values in the dataset.\n0 = no diabetes\n1 = diabetes\nHighBP: If subject has high blood pressure or not.\n0 = no high blood pressure\n1 = high blood pressure\nHighChol: If subject has high cholesterol or not.\n0 = no high cholesterol\n1 = high cholesterol\nCholCheck: If subject has had their cholesterol checked in the past 5 years.\n0 = no cholesterol check in 5 years\n1 = yes cholesterol check in 5 years\nBMI: Body Mass Index.\nPhysActivity: Physical activity in past 30 days - not including job.\n0 = no\n1 = yes\nSex: Is the subject male or female.\n0 = female\n1 = male\nAge: Thirteen level category indicating the age of the subject.\n1 = 18-24\n2 = 25-29\n3 = 30-34\n4 = 35-39\n5 = 40-44\n6 = 45-49\n7 = 50-54\n8 = 55-59\n9 = 60-64\n10 = 65-69\n11 = 70-74\n12 = 75-79\n13 = 80 or older\n\n\n\nThe purpose of Exploratory Data Analysis (EDA) is to understand the underlying structure, patterns, and relationships in a dataset before applying statistical models or making predictions. EDA serves as a critical first step in data analysis to ensure data quality and to guide further analysis or modeling efforts.\n\n\n\nThe ultimate goal of modeling in data science and statistics is to create a representation of the data’s underlying processes that can be used to 1) Explain Relationships, 2) Make Predictions, 3) Optimize Systems, 4) Classify or Group Data, 5) Identify Key Variable, 6) Reduce Complexity, 7) Generate Insights, and 8) Facilitate Generalization.\n\n\n\n\n\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n# Selecting chosen variables\ndata &lt;- data |&gt;\n  select(Diabetes_binary, HighBP, HighChol, CholCheck, BMI, PhysActivity, Sex, Age)\n\n\n\n\n\n\n\n# Seeing how the variables are stored\nstr(data)\n\ntibble [253,680 × 8] (S3: tbl_df/tbl/data.frame)\n $ Diabetes_binary: num [1:253680] 0 0 0 0 0 0 0 0 1 0 ...\n $ HighBP         : num [1:253680] 1 0 1 1 1 1 1 1 1 0 ...\n $ HighChol       : num [1:253680] 1 0 1 0 1 1 0 1 1 0 ...\n $ CholCheck      : num [1:253680] 1 0 1 1 1 1 1 1 1 1 ...\n $ BMI            : num [1:253680] 40 25 28 27 24 25 30 25 30 24 ...\n $ PhysActivity   : num [1:253680] 0 1 0 1 1 1 0 1 0 0 ...\n $ Sex            : num [1:253680] 0 0 0 0 0 1 0 0 0 1 ...\n $ Age            : num [1:253680] 9 7 9 11 11 10 9 11 9 8 ...\n\n\n\n\n\n\n# Column names\nnames(data)\n\n[1] \"Diabetes_binary\" \"HighBP\"          \"HighChol\"        \"CholCheck\"      \n[5] \"BMI\"             \"PhysActivity\"    \"Sex\"             \"Age\"            \n\n\n\n# Looking at unique values in the Diabetes_binary variable\nunique(data$Diabetes_binary)\n\n[1] 0 1\n\n\n\n# Quick numeric summary of data\nsummary(data)\n\n Diabetes_binary      HighBP         HighChol        CholCheck     \n Min.   :0.0000   Min.   :0.000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:1.0000  \n Median :0.0000   Median :0.000   Median :0.0000   Median :1.0000  \n Mean   :0.1393   Mean   :0.429   Mean   :0.4241   Mean   :0.9627  \n 3rd Qu.:0.0000   3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.000   Max.   :1.0000   Max.   :1.0000  \n      BMI         PhysActivity         Sex              Age        \n Min.   :12.00   Min.   :0.0000   Min.   :0.0000   Min.   : 1.000  \n 1st Qu.:24.00   1st Qu.:1.0000   1st Qu.:0.0000   1st Qu.: 6.000  \n Median :27.00   Median :1.0000   Median :0.0000   Median : 8.000  \n Mean   :28.38   Mean   :0.7565   Mean   :0.4403   Mean   : 8.032  \n 3rd Qu.:31.00   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:10.000  \n Max.   :98.00   Max.   :1.0000   Max.   :1.0000   Max.   :13.000  \n\n\nEvery variable except BMI and Age are binary, as indicated CDC’s dataset description as well as by the min and max values.\n\n\n\n\n# Using tidy syntax to look for missing values\ndata |&gt;\n  is.na() |&gt;\n  colSums()\n\nDiabetes_binary          HighBP        HighChol       CholCheck             BMI \n              0               0               0               0               0 \n   PhysActivity             Sex             Age \n              0               0               0 \n\n\nThere are no missing values in this dataset.\n\n\n\n\ndata &lt;- data |&gt;\n  mutate(\n    # Converting most variables to factors\n    diabetes = as.factor(Diabetes_binary),\n    high_bp = as.factor(HighBP),\n    high_chol = as.factor(HighChol),\n    chol_check = as.factor(CholCheck),\n    physical_act = as.factor(PhysActivity),\n    sex = as.factor(Sex),\n    age = as.factor(Age),\n    \n    # Recoding factor levels to change the names of the values \n    diabetes = fct_recode(diabetes,\n                          `No Diabetes` = \"0\",\n                          Diabetes = \"1\"),\n    high_bp = fct_recode(high_bp,\n                         No = \"0\",\n                         Yes = \"1\"),\n    high_chol = fct_recode(high_chol,\n                           No = \"0\",\n                           Yes = \"1\"),\n    chol_check = fct_recode(chol_check,\n                            No = \"0\",\n                            Yes = \"1\"),\n    physical_act = fct_recode(physical_act,\n                              No = \"0\",\n                              Yes = \"1\"),\n    sex = fct_recode(sex,\n                     Female = \"0\",\n                     Male = \"1\"),\n    age = fct_recode(age,\n                     `18-24` = \"1\",\n                     `25-29` = \"2\",\n                     `30-34` = \"3\",\n                     `35-39` = \"4\",\n                     `40-44` = \"5\",\n                     `45-49` = \"6\",\n                     `50-54` = \"7\",\n                     `55-59` = \"8\",\n                     `60-64` = \"9\",\n                     `65-69` = \"10\",\n                     `70-74` = \"11\",\n                     `75-79` = \"12\",\n                     `80_or_older` = \"13\")) |&gt;\n  # Removing most original variables\n  select(-Diabetes_binary, -HighBP, -HighChol, -CholCheck, -PhysActivity, -Sex, -Age)\n\n\n\n\n\n# Investigating the Response Variable\ntable(\"diabetes\" = data$diabetes)\n\ndiabetes\nNo Diabetes    Diabetes \n     218334       35346 \n\n\nMany more subjects without diabetes then with diabetes.\n\n# Investigating the Response Variable and Blood Pressure\ntable(\"diabetes\" = data$diabetes,\n      \"High Blood Pressure\" = data$high_bp)\n\n             High Blood Pressure\ndiabetes          No    Yes\n  No Diabetes 136109  82225\n  Diabetes      8742  26604\n\n\nRoughly 62% of subjects without diabetes reported no high blood pressure and roughly 25% of subjects with diabetes reported no high blood pressure.*\n\n# Investigating the Response Variable and Cholesterol\ntable(\"diabetes\" = data$diabetes,\n      \"High Cholesterol\" = data$high_chol)\n\n             High Cholesterol\ndiabetes          No    Yes\n  No Diabetes 134429  83905\n  Diabetes     11660  23686\n\n\nThere is roughly four times more people with high cholesterol without diabetes then with diabetes.\n\n# Investigating the Response Variable and Sex\ntable(\"diabetes\" = data$diabetes,\n      \"Sex\" = data$sex)\n\n             Sex\ndiabetes      Female   Male\n  No Diabetes 123563  94771\n  Diabetes     18411  16935\n\n\nThe difference between males and females with diabetes in this study is roughly 1,500 people. In a dataset consisting of 253,680 people, this is extremely close.\n\n# Investigating the Response Variable by Sex and Blood Pressure\ntable(\"diabetes\" = data$diabetes,\n      \"High Blood Pressure?\" = data$high_bp,\n      \"Sex\" = data$sex)\n\n, , Sex = Female\n\n             High Blood Pressure?\ndiabetes         No   Yes\n  No Diabetes 79815 43748\n  Diabetes     4506 13905\n\n, , Sex = Male\n\n             High Blood Pressure?\ndiabetes         No   Yes\n  No Diabetes 56294 38477\n  Diabetes     4236 12699\n\n\nSimilar to the last the contingency table, the number of males and females with and without diabetes and high blood pressure is very close.\n\n# Investigating the Response Variable and Age\ntable(\"diabetes\" = data$diabetes,\n      \"Age Range\" = data$age)\n\n             Age Range\ndiabetes      18-24 25-29 30-34 35-39 40-44 45-49 50-54 55-59 60-64 65-69 70-74\n  No Diabetes  5622  7458 10809 13197 15106 18077 23226 26569 27511 25636 18392\n  Diabetes       78   140   314   626  1051  1742  3088  4263  5733  6558  5141\n             Age Range\ndiabetes      75-79 80_or_older\n  No Diabetes 12577       14154\n  Diabetes     3403        3209\n\n\nSubjects in the age range of 65-69 made up the largest group of individuals with diabetes.\n\n# Measure of center and spread for BMI grouped by diabetes\ndata |&gt;\n  group_by(diabetes) |&gt;\n  summarize(across(\"BMI\", \n                   .fns = c(\"mean\" = mean,\n                            \"median\" = median,\n                            \"sd\" = sd,\n                            \"IQR\" = IQR,\n                            \"min\" = min,\n                            \"max\" = max),\n                   .names = \"{.col}_{.fn}\"))\n\n# A tibble: 2 × 7\n  diabetes    BMI_mean BMI_median BMI_sd BMI_IQR BMI_min BMI_max\n  &lt;fct&gt;          &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 No Diabetes     27.8         27   6.29       7      12      98\n2 Diabetes        31.9         31   7.36       8      13      98\n\n\nThe mean and median BMI values for individuals with and without diabetes are virtually the same.\n\n\n\n\n# Bar plot\nggplot(data, aes(x = diabetes)) +\n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Individuals with Diabetes\",\n       x = \"Diabetes?\",\n       y = \"Count\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nIt’s interesting to visualize just how many less people there are with diabetes then without in this dataset.\n\n# Stacked bar plot\nggplot(data, aes(x = diabetes, fill = sex)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Proportion of Diabetes by Sex\",\n       x = \"Diabetes?\",\n       y = \"Proportion\") +\n  scale_fill_manual(values = c(\"skyblue\", \"salmon\")) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nAgain, the difference between males and females with diabetes in this study is roughly 1,500 people. It’s interesting that more males have diabetes then females.\n\n# Stacked bar plot\nggplot(data, aes(x = diabetes, fill = physical_act)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Proportion of Diabetes by Physical Activity in the Last 30 Days\",\n       x = \"Diabetes?\",\n       y = \"Proportion\") +\n  scale_fill_manual(values = c(\"skyblue\", \"salmon\")) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nIt’s interesting, and unsurprising, that individuals with diabetes engage in less physical activity.\n\nggplot(data, aes(x = diabetes, y = BMI)) +\n  geom_jitter(aes(color = sex)) +\n  labs(title = \"Diabetes and Body Mass Index by Sex\",\n       x = \"Diabetes?\",\n       y = \"BMI\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nThe scatter plot clearly shows that individuals with diabetes tend to have a lower BMI.\n\n# Proportional bar plot for Diabetes by Physical Activity and Age\nggplot(data, aes(x = diabetes, fill = physical_act)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Proportion of Diabetes by Physical Activity and Age\",\n       x = \"Diabetes?\",\n       y = \"Proportion\") +\n  scale_fill_manual(values = c(\"skyblue\", \"salmon\")) +\n  facet_wrap(~age) +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 60, hjust = 1))  # Rotate x-axis text\n\n\n\n\n\n\n\n\nIt’s interesting that at the lowest age range (18-24) the proportion of individuals with and without diabetes is the closest.\n\n# Proportional bar plot for Diabetes by Sex and Blood pressure\nggplot(data, aes(x = diabetes, fill = high_bp)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Proportion of Diabetes by Physical Activity and Age\",\n       x = \"Diabetes?\",\n       y = \"Proportion\") +\n  scale_fill_manual(values = c(\"skyblue\", \"salmon\")) +\n  facet_wrap(~sex) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nIt’s interesting that the proportions of males and females with and without diabetes are similar."
  },
  {
    "objectID": "modeling.html",
    "href": "modeling.html",
    "title": "Final Proejct: Modeling File",
    "section": "",
    "text": "The data for this project is from Diabetes Health Indicators Dataset. This dataset was put together from the Center of Disease Control’s (CDC) Behavior Risk Factor Surveillance System (BRFSS) in 2015. The BRFSS is a premier telephone health-related telephone survey designed to collect state data about United States residents regarding their health-related risk behaviors, chronic health conditions, and use of preventive services. We are particularly interested in the indicators for Diabetes.\n\n\n\ndiabetes: If subject has diabetes or not. While the dataset source mentions a prediabetes level, there are no corresponding values in the dataset.\nNo Diabetes = no diabetes\nDiabetes = has diabetes\nhigh_bp: If subject has high blood pressure or not.\nNo = no high blood pressure\nYes = high blood pressure\nhigh_chol: If subject has high cholesterol or not.\nNo = no high cholesterol\nYes = high cholesterol\nBMI: Body Mass Index.\nphysical_act: Physical activity in past 30 days - not including job.\nNo = no\nYes = yes\nSex: Is the subject male or female.\nFemale = female\nMale = male\nAge: Thirteen level category indicating the age of the subject.\nAge Ranges\n18-24\n25-29\n30-34\n35-39\n40-44\n45-49\n50-54\n55-59\n60-64\n65-69\n70-74\n75-79\n80 or older\n\n\n\nThe goal of this file is to create models for predicting the diabetes variable. We’ll be predicting this variable using Classification Tree and Random Forest models. To evaluate the our models, we’ll use log-loss as our chosen metric. Additionally, we’ll be using 5 fold cross-validation to select the best model from that family of models."
  },
  {
    "objectID": "modeling.html#introduction",
    "href": "modeling.html#introduction",
    "title": "Final Proejct: Modeling File",
    "section": "",
    "text": "The data for this project is from Diabetes Health Indicators Dataset. This dataset was put together from the Center of Disease Control’s (CDC) Behavior Risk Factor Surveillance System (BRFSS) in 2015. The BRFSS is a premier telephone health-related telephone survey designed to collect state data about United States residents regarding their health-related risk behaviors, chronic health conditions, and use of preventive services. We are particularly interested in the indicators for Diabetes.\n\n\n\ndiabetes: If subject has diabetes or not. While the dataset source mentions a prediabetes level, there are no corresponding values in the dataset.\nNo Diabetes = no diabetes\nDiabetes = has diabetes\nhigh_bp: If subject has high blood pressure or not.\nNo = no high blood pressure\nYes = high blood pressure\nhigh_chol: If subject has high cholesterol or not.\nNo = no high cholesterol\nYes = high cholesterol\nBMI: Body Mass Index.\nphysical_act: Physical activity in past 30 days - not including job.\nNo = no\nYes = yes\nSex: Is the subject male or female.\nFemale = female\nMale = male\nAge: Thirteen level category indicating the age of the subject.\nAge Ranges\n18-24\n25-29\n30-34\n35-39\n40-44\n45-49\n50-54\n55-59\n60-64\n65-69\n70-74\n75-79\n80 or older\n\n\n\nThe goal of this file is to create models for predicting the diabetes variable. We’ll be predicting this variable using Classification Tree and Random Forest models. To evaluate the our models, we’ll use log-loss as our chosen metric. Additionally, we’ll be using 5 fold cross-validation to select the best model from that family of models."
  },
  {
    "objectID": "modeling.html#predictive-modeling-set-up",
    "href": "modeling.html#predictive-modeling-set-up",
    "title": "Final Proejct: Modeling File",
    "section": "Predictive Modeling Set up",
    "text": "Predictive Modeling Set up\n\nSplitting Data into Training and Test Sets\n\n# Setting a seed to make things reproducible\nset.seed(23)\n\n# tidy models to split the data into a training and test set (70/30 split)\ndata_split &lt;- initial_split(data_2, prop = 0.70, strata = diabetes)\ndata_train &lt;- training(data_split)\ndata_test &lt;- testing(data_split)\n\n# 5 fold cross validation on the training set\ndata_5_fold &lt;- vfold_cv(data_train, 5)\n\n\n\nCreate our Recipe for Data Preprocessing\n\nrec &lt;- recipe(diabetes ~ ., data = data_2) |&gt;\n  step_dummy(high_bp, high_chol, physical_act, sex, age) |&gt;\n  step_normalize(BMI)"
  },
  {
    "objectID": "modeling.html#fitting-a-tuned-classification-tree-model",
    "href": "modeling.html#fitting-a-tuned-classification-tree-model",
    "title": "Final Proejct: Modeling File",
    "section": "Fitting a tuned Classification Tree model",
    "text": "Fitting a tuned Classification Tree model\n\nWhat’s a Classification Tree model?\nClassification Trees are a type of decision tree model specifically designed for problems where the response variable is categorical, meaning it takes on discrete values, such as classes or labels. While similar in structure and approach to regression trees, which predict continuous numerical outcomes, classification trees aim to assign data points to specific categories based on the most prevalent class in a region.\n\n\nCreating a Classification Tree model instance\n\nclass_tree_mod &lt;- decision_tree(tree_depth = tune(), # Tuning parameters\n                          min_n = 10,\n                          cost_complexity = tune()) |&gt;\n  set_engine(\"rpart\") |&gt;\n  set_mode(\"classification\") # To classify the best predictor\n\n\n\nClassification Workflow\n\nclass_tree_wkf &lt;- workflow() |&gt;\n  add_recipe(rec) |&gt;\n  add_model(class_tree_mod)\n\n\n\nFit Classification Model with tune_grid() and grid_regular()\n\nclassification_grid &lt;- class_tree_wkf |&gt;\n  tune_grid(resamples = data_5_fold,\n            grid = grid_regular(tree_depth(), cost_complexity(), levels = 10),\n            metrics = metric_set(mn_log_loss)) # Model metric\n\n\n\nCollecting the metrics computed across the folds for each tuning parameter\n\nclassification_grid |&gt;\n  collect_metrics() |&gt; # collecting defining model metrics\n  filter(.metric == \"mn_log_loss\") # filter by defining model metrics\n\n# A tibble: 100 × 8\n   cost_complexity tree_depth .metric     .estimator  mean     n std_err .config\n             &lt;dbl&gt;      &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;  \n 1    0.0000000001          1 mn_log_loss binary     0.404     5 0.00121 Prepro…\n 2    0.0000000001          2 mn_log_loss binary     0.404     5 0.00121 Prepro…\n 3    0.0000000001          4 mn_log_loss binary     0.358     5 0.00129 Prepro…\n 4    0.0000000001          5 mn_log_loss binary     0.358     5 0.00129 Prepro…\n 5    0.0000000001          7 mn_log_loss binary     0.353     5 0.00184 Prepro…\n 6    0.0000000001          8 mn_log_loss binary     0.353     5 0.00132 Prepro…\n 7    0.0000000001         10 mn_log_loss binary     0.350     5 0.00200 Prepro…\n 8    0.0000000001         11 mn_log_loss binary     0.351     5 0.00188 Prepro…\n 9    0.0000000001         13 mn_log_loss binary     0.353     5 0.00207 Prepro…\n10    0.0000000001         15 mn_log_loss binary     0.356     5 0.00205 Prepro…\n# ℹ 90 more rows\n\n\n\n\nUsing select_best() to pull out best Classification model\n\nlowest_log_loss &lt;- classification_grid |&gt;\n  select_best(metric = \"mn_log_loss\")\n\n\n\nfit best Classification Tree model to the entire training set to see the model fit\n\nclassification_final_fit &lt;- class_tree_wkf |&gt;\n  finalize_workflow(lowest_log_loss) |&gt;\n  last_fit(data_split, metrics = metric_set(mn_log_loss)) # defining model metrics\n\n# Collecting full training set best model metrics \nclassification_final_fit |&gt;\n  collect_metrics()\n\n# A tibble: 1 × 4\n  .metric     .estimator .estimate .config             \n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 mn_log_loss binary         0.351 Preprocessor1_Model1\n\n\n\n\nExtracting the model fits for the best Classification Tree model\n\n# Extract the final model fits\nclassification_extract_final_model &lt;- extract_workflow(classification_final_fit) \n\n# View extracted final model fit\nclassification_extract_final_model\n\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: decision_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_dummy()\n• step_normalize()\n\n── Model ───────────────────────────────────────────────────────────────────────\nn= 177575 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n   1) root 177575 24742 No Diabetes (0.86066732 0.13933268)  \n     2) high_bp_Yes&lt; 0.5 101468  6113 No Diabetes (0.93975441 0.06024559)  \n       4) BMI&lt; 0.1703489 74734  3101 No Diabetes (0.95850617 0.04149383) *\n       5) BMI&gt;=0.1703489 26734  3012 No Diabetes (0.88733448 0.11266552)  \n        10) high_chol_Yes&lt; 0.5 17722  1470 No Diabetes (0.91705225 0.08294775)  \n          20) age_X70.74&lt; 0.5 17009  1326 No Diabetes (0.92204127 0.07795873)  \n            40) age_X75.79&lt; 0.5 16551  1228 No Diabetes (0.92580509 0.07419491)  \n              80) age_X65.69&lt; 0.5 15247  1034 No Diabetes (0.93218338 0.06781662)  \n               160) age_X80_or_older&lt; 0.5 14870   953 No Diabetes (0.93591123 0.06408877) *\n               161) age_X80_or_older&gt;=0.5 377    81 No Diabetes (0.78514589 0.21485411)  \n                 322) BMI&lt; 0.4737538 161    21 No Diabetes (0.86956522 0.13043478) *\n                 323) BMI&gt;=0.4737538 216    60 No Diabetes (0.72222222 0.27777778)  \n                   646) physical_act_Yes&gt;=0.5 111    27 No Diabetes (0.75675676 0.24324324)  \n                    1292) BMI&lt; 2.521737 108    25 No Diabetes (0.76851852 0.23148148) *\n                    1293) BMI&gt;=2.521737 3     1 Diabetes (0.33333333 0.66666667) *\n                   647) physical_act_Yes&lt; 0.5 105    33 No Diabetes (0.68571429 0.31428571) *\n              81) age_X65.69&gt;=0.5 1304   194 No Diabetes (0.85122699 0.14877301) *\n            41) age_X75.79&gt;=0.5 458    98 No Diabetes (0.78602620 0.21397380)  \n              82) BMI&lt; 0.6254563 273    43 No Diabetes (0.84249084 0.15750916) *\n              83) BMI&gt;=0.6254563 185    55 No Diabetes (0.70270270 0.29729730)  \n               166) BMI&lt; 1.232266 128    33 No Diabetes (0.74218750 0.25781250) *\n               167) BMI&gt;=1.232266 57    22 No Diabetes (0.61403509 0.38596491)  \n                 334) physical_act_Yes&lt; 0.5 29     8 No Diabetes (0.72413793 0.27586207)  \n                   668) BMI&gt;=1.383969 20     3 No Diabetes (0.85000000 0.15000000) *\n                   669) BMI&lt; 1.383969 9     4 Diabetes (0.44444444 0.55555556) *\n                 335) physical_act_Yes&gt;=0.5 28    14 No Diabetes (0.50000000 0.50000000)  \n                   670) BMI&lt; 1.990779 18     8 No Diabetes (0.55555556 0.44444444)  \n                    1340) sex_Male&lt; 0.5 9     3 No Diabetes (0.66666667 0.33333333) *\n                    1341) sex_Male&gt;=0.5 9     4 Diabetes (0.44444444 0.55555556) *\n                   671) BMI&gt;=1.990779 10     4 Diabetes (0.40000000 0.60000000) *\n          21) age_X70.74&gt;=0.5 713   144 No Diabetes (0.79803647 0.20196353)  \n            42) physical_act_Yes&gt;=0.5 489    80 No Diabetes (0.83640082 0.16359918) *\n            43) physical_act_Yes&lt; 0.5 224    64 No Diabetes (0.71428571 0.28571429)  \n              86) BMI&gt;=1.535671 28     5 No Diabetes (0.82142857 0.17857143) *\n              87) BMI&lt; 1.535671 196    59 No Diabetes (0.69897959 0.30102041)  \n               174) BMI&lt; 0.4737538 73    17 No Diabetes (0.76712329 0.23287671) *\n               175) BMI&gt;=0.4737538 123    42 No Diabetes (0.65853659 0.34146341)  \n                 350) sex_Male&lt; 0.5 70    19 No Diabetes (0.72857143 0.27142857) *\n                 351) sex_Male&gt;=0.5 53    23 No Diabetes (0.56603774 0.43396226)  \n                   702) BMI&gt;=0.6254563 40    15 No Diabetes (0.62500000 0.37500000) *\n                   703) BMI&lt; 0.6254563 13     5 Diabetes (0.38461538 0.61538462) *\n        11) high_chol_Yes&gt;=0.5 9012  1542 No Diabetes (0.82889481 0.17110519)  \n          22) BMI&lt; 0.9288612 6028   842 No Diabetes (0.86031851 0.13968149) *\n          23) BMI&gt;=0.9288612 2984   700 No Diabetes (0.76541555 0.23458445)  \n            46) age_X65.69&lt; 0.5 2652   587 No Diabetes (0.77865762 0.22134238)  \n\n...\nand 224 more lines."
  },
  {
    "objectID": "modeling.html#fitting-a-tuned-random-forest-model",
    "href": "modeling.html#fitting-a-tuned-random-forest-model",
    "title": "Final Proejct: Modeling File",
    "section": "Fitting a tuned Random Forest model",
    "text": "Fitting a tuned Random Forest model\n\nWhat’s a Random Forest model?\nRandom Forest models are an ensemble learning technique that builds upon the idea of bagged (bootstrap aggregated) tree models. They are designed to improve prediction accuracy and robustness while reducing overfitting. Random Forest models achieve this by combining multiple decision trees trained on bootstrap samples of the data and introducing randomness in the predictor selection process at each split.\n\n\nCreating a Random Forest Instance\n\nrf_spec &lt;- rand_forest(mtry = tune()) |&gt; # varying values for mrty\n set_engine(\"ranger\", importance = \"impurity\") |&gt;\n set_mode(\"classification\") # To classify best predictor\n\n\n\nRandom Forest workflow\n\nrf_wkf &lt;- workflow() |&gt;\n add_recipe(rec) |&gt; # Recipe\n add_model(rf_spec) # Defined model instance\n\n\n\nCV to Select our Tuning Parameters\n\nrf_fit &lt;- rf_wkf |&gt;\n tune_grid(resamples = data_5_fold,\n grid = 10,\n metrics = metric_set(mn_log_loss)) # defining model metrics\n\ni Creating pre-processing data to finalize unknown parameter: mtry\n\n\n\n\nPulling out model metrics\n\nrf_fit |&gt;\n collect_metrics() |&gt; # Collecting defined model metrics\n filter(.metric == \"mn_log_loss\") |&gt;\n arrange(mean) # Arranged by mean log-loss value\n\n# A tibble: 8 × 7\n   mtry .metric     .estimator  mean     n  std_err .config             \n  &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               \n1     5 mn_log_loss binary     0.335     5 0.000928 Preprocessor1_Model4\n2     4 mn_log_loss binary     0.336     5 0.000912 Preprocessor1_Model6\n3     6 mn_log_loss binary     0.336     5 0.000950 Preprocessor1_Model7\n4     9 mn_log_loss binary     0.339     5 0.00100  Preprocessor1_Model3\n5    12 mn_log_loss binary     0.345     5 0.00110  Preprocessor1_Model2\n6    14 mn_log_loss binary     0.350     5 0.00119  Preprocessor1_Model1\n7     1 mn_log_loss binary     0.366     5 0.000939 Preprocessor1_Model5\n8    17 mn_log_loss binary     0.440     5 0.00453  Preprocessor1_Model8\n\n\n\n\nUsing select_best() to grab the best models tuning parameter values\n\nrf_best_params &lt;- rf_fit |&gt;\n  select_best(metric = \"mn_log_loss\") # defining the metric\nrf_best_params\n\n# A tibble: 1 × 2\n   mtry .config             \n  &lt;int&gt; &lt;chr&gt;               \n1     5 Preprocessor1_Model4\n\n\n\n\nFinalizing our model on the training set by fitting this chosen model via finalize_workflow()\n\nrf_final_wkf &lt;- rf_wkf |&gt;\n finalize_workflow(rf_best_params)\n\n\n\nFitting the best model to the entire training data set to test on the testing set\n\nrf_final_fit &lt;- rf_final_wkf |&gt;\n last_fit(data_split, metrics = metric_set(mn_log_loss)) # defining model metrics\nrf_final_fit\n\n# Resampling results\n# Manual resampling \n# A tibble: 1 × 6\n  splits                 id            .metrics .notes   .predictions .workflow \n  &lt;list&gt;                 &lt;chr&gt;         &lt;list&gt;   &lt;list&gt;   &lt;list&gt;       &lt;list&gt;    \n1 &lt;split [177575/76105]&gt; train/test s… &lt;tibble&gt; &lt;tibble&gt; &lt;tibble&gt;     &lt;workflow&gt;\n\nrf_final_fit |&gt;\n  collect_metrics() # Collecting by defined model metrics\n\n# A tibble: 1 × 4\n  .metric     .estimator .estimate .config             \n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 mn_log_loss binary         0.335 Preprocessor1_Model1\n\n\n\n\nExtracting the final model fit for the Random Forest model\n\n# final model fits\nrf_final_model &lt;- extract_fit_engine(rf_final_fit) \nrf_final_model\n\nRanger result\n\nCall:\n ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~5L,      x), importance = ~\"impurity\", num.threads = 1, verbose = FALSE,      seed = sample.int(10^5, 1), probability = TRUE) \n\nType:                             Probability estimation \nNumber of trees:                  500 \nSample size:                      177575 \nNumber of independent variables:  17 \nMtry:                             5 \nTarget node size:                 10 \nVariable importance mode:         impurity \nSplitrule:                        gini \nOOB prediction error (Brier s.):  0.1027618"
  },
  {
    "objectID": "modeling.html#comparing-best-models-fit-to-entire-training-set.",
    "href": "modeling.html#comparing-best-models-fit-to-entire-training-set.",
    "title": "Final Proejct: Modeling File",
    "section": "Comparing Best Models fit to entire training set.",
    "text": "Comparing Best Models fit to entire training set.\n\nBest Classification Tree Model\n\nclassification_final_fit |&gt;\n  collect_metrics() # collecting defined model metrics\n\n# A tibble: 1 × 4\n  .metric     .estimator .estimate .config             \n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 mn_log_loss binary         0.351 Preprocessor1_Model1\n\n\n\n\nBest Random Forest Model\n\nrf_final_fit |&gt;\n  collect_metrics() # Collecting by defined model metrics\n\n# A tibble: 1 × 4\n  .metric     .estimator .estimate .config             \n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 mn_log_loss binary         0.335 Preprocessor1_Model1\n\n\n\n\nWhich Model is the Best?\nBest model: Random Forest\nThe Random Forest model has a slightly better log-loss estimate of 0.334 while the Classification Tree model has a log-loss estimate of 0.349"
  }
]